<default>
version = 'Luau'
type = 'function'

[delay]
[[.args]]
name = 'delayTime'
type = 'number'
``````````
name = 'callback'
type = 'function'

[elapsedTime]
[[.returns]]
type = 'number'

[spawn]
[[.args]]
name = 'callback'
type = 'function'

[tick]
[[.returns]]
type = 'number'

[time]
[[.returns]]
type = 'number'

["require Luau"]
version = 'Luau'
name = 'require'
special = 'require'
[[.args]]
name = 'module'
type = {'ModuleScript', 'integer'}
[[.returns]]
type = any

[settings]
[[.returns]]
type = 'GlobalSettings'

[UserSettings]
[[.returns]]
type = 'UserSettings'

[typeof]
[[.args]]
name = 'object'
type = 'any'
[[.returns]]
type = 'string'

[newproxy]
[[.args]]
name = 'addMetatable'
type = 'boolean'
[[.returns]]
type = 'userdata'

[wait]
[[.args]]
name = 'seconds'
type = 'number'
[[.returns]]
type = 'number'
``````````
type = 'number'

[game]
type = 'DataModel'

[Enum]
type = 'Enums'

[shared]
type = 'table'

[script]
type = 'LuaSourceContainer'

[workspace]
type = 'Workspace'
obj = true

[plugin]
type = 'Plugin'


[getgenv]
description = 'Returns the environment that will be applied to each script ran by the scripting utility'
type = 'function'
[[.returns]]
type = "table"

[getrenv]
description = 'Returns the global environment for the LocalScript state.'
type = 'function'
[[.returns]]
type = 'table'

[getreg]
description = 'Return the Lua registry.'
type = 'function'
[[.returns]]
type = 'table'

[getgc]
name = 'getgc'
type = 'function'
description = 'Returns all functions and userdata values within the GC. Passing `true` will also return tables.'
[[.args]]
name = 'include_tables'
type = 'boolean'
optional = 'true'
[[.returns]]
type = 'table'

[getinstances]
type = 'function'
description = 'Returns a list of all instances within the game.'
[[.returns]]
name = 'instances'
type = 'table'

[getnilinstances]
type = 'function'
description = 'Returns a list of all instances parented to `nil` within the game.'
[[.returns]]
type = 'table'

[getscripts]
type = 'function'
description = 'Returns a list of all scripts within the game.'
[[.returns]]
name = 'module_scripts_and_local_script'
type = 'table'

[getloadedmodules]
type = 'function'
description = 'Returns all ModuleScripts loaded in the game.'
[[.returns]]
name = 'loadedModules'
type = 'table'

[getconnections]
type = 'function'
description = "Gets a list of connections to the specified signal.\nYou can do the following operation on a connection:\n\n.Function:	The function connected to the connection\n\n.State	The state of the connection\n\n:Enable	Enables the connection\n\n:Disable	Disables the connection\n\n :Fire	Fires the connection"
[[.returns]]
name = 'connections'
type = 'table'

[firesignal]
type = 'function'
description = 'Fires all the connections connected to the signal `Signal` with `Args`.'
[[.args]]
name = 'signal'
type = 'Signal'
``````````
name = 'Args'
type = '...table'

[fireclickdetector]
type = 'function'
description = 'Fires the designated ClickDetector with provided Distance. If Distance isn\'t provided, it will default to 0.'
[[.args]]
name = 'Detector'
type = 'ClickDetector'
``````````
name = 'Distance'
type = 'number'
optional = 'true'

[fireproximityprompt]
type = 'function'
description = 'Fires the designated ProximityPrompt.'
[[.args]]
name = 'Prompt'
type = 'ProximityPrompt'
``````````
name = 'Distance'
type = 'number'

[firetouchinterest]
type = 'function'
description = 'Fakes a .Touched event to ToTouch with Part. The Toggle argument must be either 0 or 1 (for fire/un-fire).\n\n **Note:** The ToTouch argument must have a child with class TouchTransmitter in order for this function to work.'
[[.args]]
name = 'Part'
type = 'Instance'
``````````
name = 'ToTouch'
type = 'BasePart'
``````````
name = 'Toggle'
type = 'uint'

[isnetworkowner]
type = 'function'
description = 'Returns true if the Part is owned by the local player.'
[[.args]]
name = 'Part'
type = 'BasePart'
[[.returns]]
name = 'isPlayerOwiningPart'
type = 'boolean'

[gethiddenproperty]
type = 'function'
description = 'Returns the hidden property Property from Object. Errors if the property does not exist.'
[[.args]]
name = 'Object'
type = 'Instance'
``````````
name = 'Property'
type = 'string'
[[.returns]]
name = 'property'
type = 'variant'

[sethiddenproperty]
type = 'function'
description = 'Sets the hidden property Property with Value from Object. Errors if the property does not exist.'
[[.args]]
name = 'Object'
type = 'Instance'
``````````
name = 'Property'
type = 'string'
``````````
name = 'value'
type = 'variant'

[setsimulationradius]
type = 'function'
description = 'Sets the player\'s `SimulationRadius`. If `MaxSimulationRadius` is specified, it will set that as well.'
[[.args]]
name = 'SimulationRadius'
type = 'number'
``````````
name = 'MaxSimulationRadius'
type = 'number'
optional = 'true'

[getsenv]
type = 'function'
description = 'Returns the environment of Script. Errors if the script is not loaded in memory.'
[[.args]]
name = 'Script'
type = 'ModuleScript | LocalScript'
[[.returns]]
name = 'env'
type = 'table'

[getcallingscript]
type = 'function'
description = 'Gets the script that is calling this function.'

[[.returns]]
type = 'LocalScript | ModuleScript | nil'
name = 'script'

[getscriptclosure]
type = 'function'
description = 'Gets a bare function from the script passed. Please note this is not the original function of the script and will not have upvalues/enviornment correctly defined.'

[[.args]]
name = 'Script'
type = 'ModuleScript | LocalScript'

[[.returns]]
type = 'function'

[getscripthash]
type = 'function'
description = 'Returns a SHA384 hash of the scripts bytecode. You can use this to detect changes of a script.'

[[.args]]
name = 'Script'
type = 'ModuleScript | LocalScript'

[[.returns]]
name = 'hash'
type = 'string'

[getrawmetatable]
type = 'function'
description = 'Retrieve the metatable of value irregardless of value\'s metatable\'s __metatable field. Returns nil if it doesn\'t exist.'

[[.args]]
name = 'value'
type = 'table'

[[.returns]]
name = 'metatable'
type = 'table'

[setrawmetatable]
type = 'function'
description = 'Sets `o`\'s metatable to mt even if the `__metatable` field exists in `o`\'s metatable.'
[[.args]]
name = 'o'
type = 'Object'
``````````
name = 'mt'
type = 'table'
[[.returns]]
type = 'boolean'

[setreadonly]
type = 'function'
description = 'Set\'s `t` read-only value to val.'
[[.args]]
name = 't'
type = 'table'
``````````
name = 'val'
type = 'boolean'
[[.returns]]
type = 'void'

[isreadonly]
type = 'function'
description = 'Returns `t`\'s read-only conditions.'
[[.args]]
name = 't'
type = 'table'
[[.returns]]
name = 'isTableReadOnly'
type = 'boolean'

[iswindowactive]
type = 'function'
description = 'Returns if the main window is in focus. This must return `true` for any other mouse/keyboard function to work.'
[[.returns]]
name = 'isWindowActive'
type = 'boolean'

[keypress]
type = 'function'
description = [[
  Simulates a key press for the specified keycode. Keycodes are listed [here](https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes).
]]
[[.args]]
name = 'keycode'
type = 'number'

[keyrelease]
type = 'function'
description = [[
  Releases key on the keyboard. You can acess the key values from above [here](https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes).
]]
[[.args]]
name = 'keycode'
type = 'number'

[mouse1click]
type = 'function'
description = 'Simulates a full left mouse button press.'
[[.returns]]
type = 'void'

[mouse1press]
type = 'function'
description = 'Simulates a left mouse button press without releasing it.'
[[.returns]]
type = 'void'

[mouse1release]
type = 'function'
description = 'Simulates a left mouse button release.'
[[.returns]]
type = 'void'

[mouse2click]
type = 'function'
description = 'Simulates a full right mouse button press.'
[[.returns]]
type = 'void'

[mouse2press]
type = 'function'
description = 'Simulates a right mouse button press without releasing it.'
[[.returns]]
type = 'void'

[mouse2release]
type = 'function'
description = 'Simulates a right mouse button release.'
[[.returns]]
type = 'void'

[mousescroll]
type = 'function'
description = 'Scrolls the mouse wheel virtually by `px` pixels'
[[.args]]
name = 'px'
type = 'number'

[mousemoverel]
type = 'function'
description = 'Moves the mouse cursor relatively to the current mouse position by coordinates x and y.'
[[.args]]
name = 'x'
type = 'number'
``````````
name = 'y'
type = 'number'
[[.returns]]
type = 'void'

[mousemoveabs]
type = 'function'
description = 'Move\'s your mouse to the x and y coordinates in pixels from topleft of the main window.'
[[.args]]
name = 'x'
type = 'number'
``````````
name = 'y'
type = 'number'
[[.returns]]
type = 'void'

[hookfunction]
type = 'function'
description = [[
  Hooks function old, replacing it with the function hook. The old function is returned, you must use this function in order to call the original function.

  Example:
  ```lua
  local OldFireServer
  OldFireServer = hookfunction(Instance.new'RemoteEvent'.FireServer, newcclosure(function(Event, ...)
    if not checkcaller() then
        local Args = {...}

        print(Event)
        for I, V in pairs(Args) do
            print(V)
        end
    end

    return OldFireServer(Event, ...)
  end))

  This will now print out the event who called FireServer and the arguments passed to it whenever it is called.
```
]]
[[.args]]
name = 'old'
type = 'function'
``````````
name = 'hook'
type = 'function'
[[.returns]]
name = 'oldFunction'
type = 'function'

[hookmetamethod]
type = 'function'
description = [[
Hooks the metamethod passed in the object metatable with hook. A function to call the original metamethod is returned, you must use this function in order to call the original metamethod.

This function will error if an object without a metatable is passed or a invalid metamethod is passed

You can check for examples [here](https://x.synapse.to/docs/development/metamethod_hook_examples.html)
]]
[[.args]]
name = 'object'
type = 'Object'
``````````
name = 'metamethod'
type = 'string'
``````````
name = 'hook'
type = 'function'
[[.returns]]
name = 'oldMetamethod'
type = 'function'

[newcclosure]
type = 'function'
description = 'Pushes a new CClosure that invokes function f upon call. Can be used to avoid detection in thing such as a metamethod hook.'
[[.args]]
name = 'f'
type = 'function'
[[.returns]]
name = 'anCFunction'
type = 'function'

[loadstring]
type = 'function'
description = 'Loads chunk as a Lua function with optional `chunk_name` that will be shown as the script name in errors and returns it if compilation is successful. Otherwise, if an error has occurred during compilation, nil followed by the error message will be returned.'
[[.args]]
name = 'chunk'
type = 'string'
optional = 'chunk'
``````````
name = 'chunk_name'
type = 'string'
[[.returns]]
name = 'stringFunction'
type = 'function'

[checkcaller]
type = 'function'
description = 'Returns true if the current thread is a Synapse thread. **Note:** Checkcaller does *NOT* check the call stack of the function, if you call a game function then it calls out to checkcaller, the result will be true! Be careful.'

[islclosure]
type = 'function'
description = 'Return true if `l` is a lua function'
[[.args]]
name = 'f'
type = 'function'
[[.returns]]
name = 'isLuaFunc'
type = 'boolean'

[dumpstring]
type = 'function'
description = 'Returns the Synapse formatted bytecode for source string script.'
[[.args]]
name = 'Script'
type = 'string'
[[.returns]]
name = 'bytecode'
type = 'string'

[decompile]
type = 'function'
description = [[
  Decompiles Script and returns the decompiled script with timeout. If the decompilation fails, then the return value will be an error message.

  *Note:* The mode parameter is deprecated and is not used in newer versions of Synapse.
]]
[[.args]]
name = 'thingToDecompile'
type = 'ModuleScript | LocalScript | function | string | proto'
``````````
name = 'mode'
type = 'string | boolean'
``````````
name = 'timeout'
type = 'number'
optional = 'true'
[[.returns]]
name = 'decompilation'
type = 'string'
